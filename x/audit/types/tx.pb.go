// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errata/audit/v1beta/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterProtocol struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	SourceCode  string `protobuf:"bytes,3,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty" yaml:"source_code"`
	ProjectHome string `protobuf:"bytes,4,opt,name=project_home,json=projectHome,proto3" json:"project_home,omitempty" yaml:"project_home"`
	Category    string `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty" yaml:"project_home"`
	Sender      string `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
}

func (m *MsgRegisterProtocol) Reset()         { *m = MsgRegisterProtocol{} }
func (m *MsgRegisterProtocol) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterProtocol) ProtoMessage()    {}
func (*MsgRegisterProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26c42422fec0fdc, []int{0}
}
func (m *MsgRegisterProtocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterProtocol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterProtocol.Merge(m, src)
}
func (m *MsgRegisterProtocol) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterProtocol proto.InternalMessageInfo

type MsgRegisterProtocolResponse struct {
}

func (m *MsgRegisterProtocolResponse) Reset()         { *m = MsgRegisterProtocolResponse{} }
func (m *MsgRegisterProtocolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterProtocolResponse) ProtoMessage()    {}
func (*MsgRegisterProtocolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26c42422fec0fdc, []int{1}
}
func (m *MsgRegisterProtocolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterProtocolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterProtocolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterProtocolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterProtocolResponse.Merge(m, src)
}
func (m *MsgRegisterProtocolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterProtocolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterProtocolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterProtocolResponse proto.InternalMessageInfo

type MsgJoinAttackPool struct {
	PoolId  uint64                                 `protobuf:"varint,1,opt,name=poolId,proto3" json:"poolId,omitempty" yaml:"pool_id"`
	TokenIn github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=tokenIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokenIn" yaml:"token_in"`
	Sender  string                                 `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
}

func (m *MsgJoinAttackPool) Reset()         { *m = MsgJoinAttackPool{} }
func (m *MsgJoinAttackPool) String() string { return proto.CompactTextString(m) }
func (*MsgJoinAttackPool) ProtoMessage()    {}
func (*MsgJoinAttackPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26c42422fec0fdc, []int{2}
}
func (m *MsgJoinAttackPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinAttackPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinAttackPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinAttackPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinAttackPool.Merge(m, src)
}
func (m *MsgJoinAttackPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinAttackPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinAttackPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinAttackPool proto.InternalMessageInfo

type MsgJoinAttackPoolResponse struct {
}

func (m *MsgJoinAttackPoolResponse) Reset()         { *m = MsgJoinAttackPoolResponse{} }
func (m *MsgJoinAttackPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinAttackPoolResponse) ProtoMessage()    {}
func (*MsgJoinAttackPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26c42422fec0fdc, []int{3}
}
func (m *MsgJoinAttackPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinAttackPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinAttackPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinAttackPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinAttackPoolResponse.Merge(m, src)
}
func (m *MsgJoinAttackPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinAttackPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinAttackPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinAttackPoolResponse proto.InternalMessageInfo

type MsgJoinDefensePool struct {
	PoolId  uint64                                 `protobuf:"varint,1,opt,name=poolId,proto3" json:"poolId,omitempty" yaml:"pool_id"`
	TokenIn github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=tokenIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokenIn" yaml:"token_in"`
	Sender  string                                 `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
}

func (m *MsgJoinDefensePool) Reset()         { *m = MsgJoinDefensePool{} }
func (m *MsgJoinDefensePool) String() string { return proto.CompactTextString(m) }
func (*MsgJoinDefensePool) ProtoMessage()    {}
func (*MsgJoinDefensePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26c42422fec0fdc, []int{4}
}
func (m *MsgJoinDefensePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinDefensePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinDefensePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinDefensePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinDefensePool.Merge(m, src)
}
func (m *MsgJoinDefensePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinDefensePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinDefensePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinDefensePool proto.InternalMessageInfo

type MsgJoinDefensePoolResponse struct {
}

func (m *MsgJoinDefensePoolResponse) Reset()         { *m = MsgJoinDefensePoolResponse{} }
func (m *MsgJoinDefensePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinDefensePoolResponse) ProtoMessage()    {}
func (*MsgJoinDefensePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26c42422fec0fdc, []int{5}
}
func (m *MsgJoinDefensePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinDefensePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinDefensePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinDefensePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinDefensePoolResponse.Merge(m, src)
}
func (m *MsgJoinDefensePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinDefensePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinDefensePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinDefensePoolResponse proto.InternalMessageInfo

type MsgAddErrata struct {
	PoolId            uint64 `protobuf:"varint,1,opt,name=poolId,proto3" json:"poolId,omitempty" yaml:"pool_id"`
	VulnerabilityType string `protobuf:"bytes,2,opt,name=vulnerability_type,json=vulnerabilityType,proto3" json:"vulnerability_type,omitempty" yaml:"vulnerability_type"`
	ErrataCode        string `protobuf:"bytes,3,opt,name=errata_code,json=errataCode,proto3" json:"errata_code,omitempty" yaml:"errata_code"`
	Vulnerability     string `protobuf:"bytes,4,opt,name=vulnerability,proto3" json:"vulnerability,omitempty" yaml:"vulnerability"`
	Sender            string `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
}

func (m *MsgAddErrata) Reset()         { *m = MsgAddErrata{} }
func (m *MsgAddErrata) String() string { return proto.CompactTextString(m) }
func (*MsgAddErrata) ProtoMessage()    {}
func (*MsgAddErrata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26c42422fec0fdc, []int{6}
}
func (m *MsgAddErrata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddErrata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddErrata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddErrata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddErrata.Merge(m, src)
}
func (m *MsgAddErrata) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddErrata) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddErrata.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddErrata proto.InternalMessageInfo

type MsgAddErrataResponse struct {
}

func (m *MsgAddErrataResponse) Reset()         { *m = MsgAddErrataResponse{} }
func (m *MsgAddErrataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddErrataResponse) ProtoMessage()    {}
func (*MsgAddErrataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26c42422fec0fdc, []int{7}
}
func (m *MsgAddErrataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddErrataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddErrataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddErrataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddErrataResponse.Merge(m, src)
}
func (m *MsgAddErrataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddErrataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddErrataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddErrataResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterProtocol)(nil), "errata.audit.v1beta1.MsgRegisterProtocol")
	proto.RegisterType((*MsgRegisterProtocolResponse)(nil), "errata.audit.v1beta1.MsgRegisterProtocolResponse")
	proto.RegisterType((*MsgJoinAttackPool)(nil), "errata.audit.v1beta1.MsgJoinAttackPool")
	proto.RegisterType((*MsgJoinAttackPoolResponse)(nil), "errata.audit.v1beta1.MsgJoinAttackPoolResponse")
	proto.RegisterType((*MsgJoinDefensePool)(nil), "errata.audit.v1beta1.MsgJoinDefensePool")
	proto.RegisterType((*MsgJoinDefensePoolResponse)(nil), "errata.audit.v1beta1.MsgJoinDefensePoolResponse")
	proto.RegisterType((*MsgAddErrata)(nil), "errata.audit.v1beta1.MsgAddErrata")
	proto.RegisterType((*MsgAddErrataResponse)(nil), "errata.audit.v1beta1.MsgAddErrataResponse")
}

func init() { proto.RegisterFile("errata/audit/v1beta/tx.proto", fileDescriptor_b26c42422fec0fdc) }

var fileDescriptor_b26c42422fec0fdc = []byte{
	// 708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x4e, 0x08, 0xe4, 0xc2, 0x84, 0xdf, 0x21, 0xe2, 0x06, 0x03, 0xf6, 0xd5, 0x2c, 0xb8, 0x80,
	0x54, 0xbb, 0x81, 0x45, 0x2b, 0x16, 0x95, 0x08, 0xad, 0x54, 0xaa, 0x46, 0x42, 0x56, 0x57, 0xed,
	0x22, 0x72, 0xec, 0xa9, 0x31, 0xd8, 0x3e, 0x96, 0x67, 0x12, 0x91, 0x37, 0xe8, 0xb2, 0x8f, 0xc0,
	0x1b, 0x74, 0xd7, 0x67, 0x60, 0xc9, 0xaa, 0xaa, 0xba, 0xb0, 0x2a, 0xd8, 0x74, 0xd1, 0x6e, 0xfc,
	0x04, 0x55, 0x3c, 0x4e, 0xea, 0x90, 0x40, 0xd3, 0x6d, 0x57, 0xf6, 0x9c, 0xef, 0x3b, 0xe7, 0xcc,
	0x7c, 0x33, 0xdf, 0x0c, 0x5a, 0xa7, 0x61, 0x68, 0x70, 0x43, 0x33, 0x5a, 0x96, 0xc3, 0xb5, 0x76,
	0xb5, 0x49, 0xb9, 0xa1, 0xf1, 0x73, 0x35, 0x08, 0x81, 0x03, 0x2e, 0x0b, 0x54, 0x4d, 0x50, 0x55,
	0xa0, 0x55, 0xa9, 0x6c, 0x83, 0x0d, 0x09, 0x41, 0xeb, 0xfe, 0x09, 0xae, 0x24, 0x9b, 0xc0, 0x3c,
	0x60, 0x5a, 0xd3, 0x60, 0x34, 0x2d, 0x54, 0xd5, 0x4c, 0x70, 0x7c, 0x81, 0x93, 0x4f, 0x13, 0x68,
	0xb9, 0xce, 0x6c, 0x9d, 0xda, 0x0e, 0xe3, 0x34, 0x3c, 0xee, 0x06, 0x4d, 0x70, 0xf1, 0x26, 0x9a,
	0xe2, 0x0e, 0x77, 0x69, 0x25, 0xff, 0x5f, 0x7e, 0x6b, 0xa6, 0xb6, 0x18, 0x47, 0xca, 0x6c, 0xc7,
	0xf0, 0xdc, 0x7d, 0x92, 0x84, 0x89, 0x2e, 0x60, 0xfc, 0x18, 0x95, 0x2c, 0xca, 0xcc, 0xd0, 0x09,
	0xb8, 0x03, 0x7e, 0x65, 0x22, 0x61, 0xaf, 0xc4, 0x91, 0x82, 0x05, 0x3b, 0x03, 0x12, 0x3d, 0x4b,
	0xc5, 0x8f, 0x50, 0x89, 0x41, 0x2b, 0x34, 0x69, 0xc3, 0x04, 0x8b, 0x56, 0x0a, 0xb7, 0x33, 0x33,
	0x20, 0xd1, 0x91, 0x18, 0x1d, 0x82, 0x45, 0xf1, 0x3e, 0x9a, 0x0d, 0x42, 0x38, 0xa5, 0x26, 0x6f,
	0x9c, 0x80, 0x47, 0x2b, 0x93, 0x49, 0xe6, 0xbf, 0x71, 0xa4, 0x2c, 0x8b, 0xcc, 0x2c, 0x4a, 0xf4,
	0x52, 0x3a, 0x7c, 0x0e, 0x1e, 0xc5, 0x7b, 0x68, 0xda, 0x34, 0x38, 0xb5, 0x21, 0xec, 0x54, 0xa6,
	0xee, 0xcf, 0xeb, 0x13, 0xf1, 0x36, 0x2a, 0x32, 0xea, 0x5b, 0x34, 0xac, 0x14, 0x93, 0x94, 0xa5,
	0x38, 0x52, 0xe6, 0xd2, 0x49, 0x26, 0x71, 0xa2, 0xa7, 0x84, 0xfd, 0xe9, 0x77, 0x17, 0x4a, 0xee,
	0xdb, 0x85, 0x92, 0x23, 0x1b, 0x68, 0x6d, 0x84, 0xae, 0x3a, 0x65, 0x01, 0xf8, 0x8c, 0x92, 0xef,
	0x79, 0xb4, 0x54, 0x67, 0xf6, 0x0b, 0x70, 0xfc, 0x03, 0xce, 0x0d, 0xf3, 0xec, 0x18, 0xc0, 0xc5,
	0x3b, 0xa8, 0x18, 0x00, 0xb8, 0x47, 0x56, 0x22, 0xfb, 0x64, 0x0d, 0xc7, 0x91, 0x32, 0x9f, 0x4e,
	0x0e, 0xc0, 0x6d, 0x38, 0x16, 0xd1, 0x53, 0x06, 0x6e, 0xa3, 0x7f, 0x38, 0x9c, 0x51, 0xff, 0x48,
	0xa8, 0x5e, 0xda, 0x5d, 0x55, 0xc5, 0x5e, 0xab, 0xdd, 0xbd, 0xee, 0x1d, 0x0b, 0xf5, 0x10, 0x1c,
	0xbf, 0x76, 0x70, 0x19, 0x29, 0xb9, 0x2f, 0x91, 0xb2, 0x69, 0x3b, 0xfc, 0xa4, 0xd5, 0x54, 0x4d,
	0xf0, 0xb4, 0xf4, 0x60, 0x88, 0xcf, 0x03, 0x66, 0x9d, 0x69, 0xbc, 0x13, 0x50, 0xa6, 0x1e, 0xf9,
	0x3c, 0x8e, 0x94, 0x85, 0x74, 0xb3, 0xbb, 0x1d, 0x1a, 0x8e, 0x4f, 0xf4, 0x5e, 0xb3, 0x8c, 0x1a,
	0x85, 0xf1, 0xd5, 0x58, 0x43, 0xab, 0x43, 0xab, 0xed, 0x6b, 0xf1, 0x23, 0x8f, 0x70, 0x8a, 0x3e,
	0xa5, 0x6f, 0xa9, 0xcf, 0xe8, 0xdf, 0x2d, 0xc6, 0x3a, 0x92, 0x86, 0x97, 0xdb, 0x57, 0xe3, 0xe3,
	0x04, 0x9a, 0xad, 0x33, 0xfb, 0xc0, 0xb2, 0x9e, 0x25, 0x36, 0xff, 0x23, 0x1d, 0x5e, 0x22, 0xdc,
	0x6e, 0xb9, 0x3e, 0x0d, 0x8d, 0xa6, 0xe3, 0x3a, 0xbc, 0xd3, 0xe8, 0x2e, 0x23, 0x75, 0xe5, 0x46,
	0x1c, 0x29, 0xab, 0x22, 0x6f, 0x98, 0x43, 0xf4, 0xa5, 0x81, 0xe0, 0xab, 0x4e, 0x40, 0xbb, 0x16,
	0x15, 0x57, 0xcd, 0x1d, 0x16, 0xcd, 0x80, 0x44, 0x47, 0x62, 0x94, 0x58, 0xf4, 0x09, 0x9a, 0x1b,
	0xa8, 0x96, 0x7a, 0xb4, 0x12, 0x47, 0x4a, 0x79, 0xc4, 0x0c, 0x88, 0x3e, 0x48, 0xcf, 0xc8, 0x3a,
	0x35, 0xbe, 0xac, 0x2b, 0xa8, 0x9c, 0xd5, 0xad, 0x27, 0xe8, 0xee, 0x87, 0x02, 0x2a, 0xd4, 0x99,
	0x8d, 0x03, 0xb4, 0x38, 0x74, 0xcd, 0x6d, 0xab, 0xa3, 0xee, 0x52, 0x75, 0x84, 0x73, 0xa5, 0xea,
	0xd8, 0xd4, 0x5e, 0x67, 0x7c, 0x8a, 0xe6, 0x6f, 0x19, 0xfc, 0xff, 0x3b, 0x8b, 0x0c, 0x12, 0x25,
	0x6d, 0x4c, 0x62, 0xbf, 0x97, 0x87, 0x16, 0x6e, 0x1b, 0x68, 0xeb, 0xde, 0x1a, 0x19, 0xa6, 0xf4,
	0x70, 0x5c, 0x66, 0xbf, 0xdd, 0x1b, 0x34, 0xf3, 0xeb, 0x84, 0x92, 0x3b, 0xd3, 0xfb, 0x1c, 0x69,
	0xe7, 0xf7, 0x9c, 0x5e, 0xf1, 0xda, 0xe1, 0xe5, 0xb5, 0x9c, 0xbf, 0xba, 0x96, 0xf3, 0x5f, 0xaf,
	0xe5, 0xfc, 0xfb, 0x1b, 0x39, 0x77, 0x75, 0x23, 0xe7, 0x3e, 0xdf, 0xc8, 0xb9, 0xd7, 0xdb, 0x19,
	0xcf, 0x7a, 0x06, 0xe7, 0x6d, 0x1a, 0x32, 0xaa, 0xa5, 0xaf, 0xe5, 0x79, 0xfa, 0x5e, 0x26, 0xd6,
	0x6d, 0x16, 0x93, 0x07, 0x6e, 0xef, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x15, 0x3c, 0xec,
	0x4c, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterProtocol defines a method for registering a new protocol to Errata protocol
	RegisterProtocol(ctx context.Context, in *MsgRegisterProtocol, opts ...grpc.CallOption) (*MsgRegisterProtocolResponse, error)
	// JoinAttackPool defines a method for joining the attack pool
	JoinAttackPool(ctx context.Context, in *MsgJoinAttackPool, opts ...grpc.CallOption) (*MsgJoinAttackPoolResponse, error)
	// JoinDefensePool defines a method for joining the defense pool
	JoinDefensePool(ctx context.Context, in *MsgJoinDefensePool, opts ...grpc.CallOption) (*MsgJoinDefensePoolResponse, error)
	// AddErrata definss a method for registering a new Errata for a procol
	AddErrata(ctx context.Context, in *MsgAddErrata, opts ...grpc.CallOption) (*MsgAddErrataResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterProtocol(ctx context.Context, in *MsgRegisterProtocol, opts ...grpc.CallOption) (*MsgRegisterProtocolResponse, error) {
	out := new(MsgRegisterProtocolResponse)
	err := c.cc.Invoke(ctx, "/errata.audit.v1beta1.Msg/RegisterProtocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinAttackPool(ctx context.Context, in *MsgJoinAttackPool, opts ...grpc.CallOption) (*MsgJoinAttackPoolResponse, error) {
	out := new(MsgJoinAttackPoolResponse)
	err := c.cc.Invoke(ctx, "/errata.audit.v1beta1.Msg/JoinAttackPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinDefensePool(ctx context.Context, in *MsgJoinDefensePool, opts ...grpc.CallOption) (*MsgJoinDefensePoolResponse, error) {
	out := new(MsgJoinDefensePoolResponse)
	err := c.cc.Invoke(ctx, "/errata.audit.v1beta1.Msg/JoinDefensePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddErrata(ctx context.Context, in *MsgAddErrata, opts ...grpc.CallOption) (*MsgAddErrataResponse, error) {
	out := new(MsgAddErrataResponse)
	err := c.cc.Invoke(ctx, "/errata.audit.v1beta1.Msg/AddErrata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterProtocol defines a method for registering a new protocol to Errata protocol
	RegisterProtocol(context.Context, *MsgRegisterProtocol) (*MsgRegisterProtocolResponse, error)
	// JoinAttackPool defines a method for joining the attack pool
	JoinAttackPool(context.Context, *MsgJoinAttackPool) (*MsgJoinAttackPoolResponse, error)
	// JoinDefensePool defines a method for joining the defense pool
	JoinDefensePool(context.Context, *MsgJoinDefensePool) (*MsgJoinDefensePoolResponse, error)
	// AddErrata definss a method for registering a new Errata for a procol
	AddErrata(context.Context, *MsgAddErrata) (*MsgAddErrataResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterProtocol(ctx context.Context, req *MsgRegisterProtocol) (*MsgRegisterProtocolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProtocol not implemented")
}
func (*UnimplementedMsgServer) JoinAttackPool(ctx context.Context, req *MsgJoinAttackPool) (*MsgJoinAttackPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinAttackPool not implemented")
}
func (*UnimplementedMsgServer) JoinDefensePool(ctx context.Context, req *MsgJoinDefensePool) (*MsgJoinDefensePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinDefensePool not implemented")
}
func (*UnimplementedMsgServer) AddErrata(ctx context.Context, req *MsgAddErrata) (*MsgAddErrataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddErrata not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterProtocol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errata.audit.v1beta1.Msg/RegisterProtocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterProtocol(ctx, req.(*MsgRegisterProtocol))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinAttackPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinAttackPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinAttackPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errata.audit.v1beta1.Msg/JoinAttackPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinAttackPool(ctx, req.(*MsgJoinAttackPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinDefensePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinDefensePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinDefensePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errata.audit.v1beta1.Msg/JoinDefensePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinDefensePool(ctx, req.(*MsgJoinDefensePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddErrata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddErrata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddErrata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errata.audit.v1beta1.Msg/AddErrata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddErrata(ctx, req.(*MsgAddErrata))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "errata.audit.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterProtocol",
			Handler:    _Msg_RegisterProtocol_Handler,
		},
		{
			MethodName: "JoinAttackPool",
			Handler:    _Msg_JoinAttackPool_Handler,
		},
		{
			MethodName: "JoinDefensePool",
			Handler:    _Msg_JoinDefensePool_Handler,
		},
		{
			MethodName: "AddErrata",
			Handler:    _Msg_AddErrata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "errata/audit/v1beta/tx.proto",
}

func (m *MsgRegisterProtocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterProtocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterProtocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProjectHome) > 0 {
		i -= len(m.ProjectHome)
		copy(dAtA[i:], m.ProjectHome)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProjectHome)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceCode) > 0 {
		i -= len(m.SourceCode)
		copy(dAtA[i:], m.SourceCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterProtocolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterProtocolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterProtocolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgJoinAttackPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinAttackPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinAttackPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.TokenIn.Size()
		i -= size
		if _, err := m.TokenIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinAttackPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinAttackPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinAttackPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgJoinDefensePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinDefensePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinDefensePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.TokenIn.Size()
		i -= size
		if _, err := m.TokenIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinDefensePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinDefensePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinDefensePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddErrata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddErrata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddErrata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Vulnerability) > 0 {
		i -= len(m.Vulnerability)
		copy(dAtA[i:], m.Vulnerability)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Vulnerability)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ErrataCode) > 0 {
		i -= len(m.ErrataCode)
		copy(dAtA[i:], m.ErrataCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ErrataCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VulnerabilityType) > 0 {
		i -= len(m.VulnerabilityType)
		copy(dAtA[i:], m.VulnerabilityType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VulnerabilityType)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddErrataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddErrataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddErrataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterProtocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProjectHome)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterProtocolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgJoinAttackPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = m.TokenIn.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgJoinAttackPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgJoinDefensePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = m.TokenIn.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgJoinDefensePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddErrata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = len(m.VulnerabilityType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ErrataCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Vulnerability)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddErrataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterProtocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterProtocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterProtocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectHome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectHome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterProtocolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterProtocolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterProtocolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinAttackPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinAttackPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinAttackPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinAttackPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinAttackPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinAttackPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinDefensePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinDefensePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinDefensePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinDefensePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinDefensePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinDefensePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddErrata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddErrata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddErrata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VulnerabilityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VulnerabilityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrataCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrataCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vulnerability", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vulnerability = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddErrataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddErrataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddErrataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
