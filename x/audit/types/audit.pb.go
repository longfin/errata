// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errata/audit/v1beta/audit.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Protocol struct {
	Id          uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Title       string                                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description string                                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	SourceCode  string                                 `protobuf:"bytes,4,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty" yaml:"source_code"`
	ProjectHome string                                 `protobuf:"bytes,5,opt,name=project_home,json=projectHome,proto3" json:"project_home,omitempty" yaml:"project_home"`
	Category    string                                 `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty" yaml:"category"`
	Errata      []*Errata                              `protobuf:"bytes,7,rep,name=errata,proto3" json:"errata,omitempty" yaml:"errata"`
	AttackPool  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=attack_pool,json=attackPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"attack_pool" yaml:"attack_pool"`
	DefensePool github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=defense_pool,json=defensePool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"defense_pool" yaml:"defense_pool"`
}

func (m *Protocol) Reset()         { *m = Protocol{} }
func (m *Protocol) String() string { return proto.CompactTextString(m) }
func (*Protocol) ProtoMessage()    {}
func (*Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff537eabe47d7b7d, []int{0}
}
func (m *Protocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Protocol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Protocol.Merge(m, src)
}
func (m *Protocol) XXX_Size() int {
	return m.Size()
}
func (m *Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_Protocol proto.InternalMessageInfo

func (m *Protocol) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Protocol) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Protocol) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Protocol) GetSourceCode() string {
	if m != nil {
		return m.SourceCode
	}
	return ""
}

func (m *Protocol) GetProjectHome() string {
	if m != nil {
		return m.ProjectHome
	}
	return ""
}

func (m *Protocol) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Protocol) GetErrata() []*Errata {
	if m != nil {
		return m.Errata
	}
	return nil
}

type Errata struct {
	VulnerabilityType string `protobuf:"bytes,1,opt,name=vulnerability_type,json=vulnerabilityType,proto3" json:"vulnerability_type,omitempty" yaml:"vulnerability_type"`
	ErrataCode        string `protobuf:"bytes,2,opt,name=errata_code,json=errataCode,proto3" json:"errata_code,omitempty" yaml:"errata_code"`
	Vulnerability     string `protobuf:"bytes,3,opt,name=vulnerability,proto3" json:"vulnerability,omitempty" yaml:"vulnerability"`
}

func (m *Errata) Reset()         { *m = Errata{} }
func (m *Errata) String() string { return proto.CompactTextString(m) }
func (*Errata) ProtoMessage()    {}
func (*Errata) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff537eabe47d7b7d, []int{1}
}
func (m *Errata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Errata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Errata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Errata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Errata.Merge(m, src)
}
func (m *Errata) XXX_Size() int {
	return m.Size()
}
func (m *Errata) XXX_DiscardUnknown() {
	xxx_messageInfo_Errata.DiscardUnknown(m)
}

var xxx_messageInfo_Errata proto.InternalMessageInfo

func (m *Errata) GetVulnerabilityType() string {
	if m != nil {
		return m.VulnerabilityType
	}
	return ""
}

func (m *Errata) GetErrataCode() string {
	if m != nil {
		return m.ErrataCode
	}
	return ""
}

func (m *Errata) GetVulnerability() string {
	if m != nil {
		return m.Vulnerability
	}
	return ""
}

func init() {
	proto.RegisterType((*Protocol)(nil), "errata.audit.v1beta1.Protocol")
	proto.RegisterType((*Errata)(nil), "errata.audit.v1beta1.Errata")
}

func init() { proto.RegisterFile("errata/audit/v1beta/audit.proto", fileDescriptor_ff537eabe47d7b7d) }

var fileDescriptor_ff537eabe47d7b7d = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0x34, 0x0d, 0xc9, 0x26, 0x11, 0x74, 0x13, 0x81, 0x41, 0xd4, 0x1b, 0xed, 0xa1,
	0x0a, 0x07, 0x6c, 0x15, 0x0e, 0xa0, 0x1e, 0x38, 0xa4, 0x54, 0x80, 0xc4, 0xa1, 0x5a, 0x71, 0xe2,
	0x12, 0x39, 0xf6, 0x92, 0x98, 0xda, 0x19, 0xcb, 0xde, 0x44, 0xe4, 0x2d, 0x78, 0xac, 0x4a, 0x1c,
	0xe8, 0x11, 0x71, 0xb0, 0x50, 0xf2, 0x06, 0x7e, 0x02, 0x94, 0x1d, 0x87, 0x3a, 0xa5, 0x97, 0x9e,
	0xb2, 0x33, 0xf3, 0xcd, 0x4c, 0xfc, 0xef, 0xbf, 0x84, 0xc9, 0x24, 0x71, 0x95, 0xeb, 0xb8, 0x73,
	0x3f, 0x50, 0xce, 0xe2, 0x78, 0x2c, 0xb7, 0x81, 0x1d, 0x27, 0xa0, 0x80, 0xf6, 0x10, 0xb0, 0x31,
	0x87, 0xc0, 0xf1, 0x93, 0xde, 0x04, 0x26, 0xa0, 0x01, 0x67, 0x73, 0x42, 0x96, 0xff, 0xa8, 0x91,
	0xc6, 0xf9, 0xe6, 0xe4, 0x41, 0x48, 0x0f, 0x49, 0x35, 0xf0, 0x4d, 0xa3, 0x6f, 0x0c, 0x6a, 0xc3,
	0x4e, 0x9e, 0xb1, 0xe6, 0xd2, 0x8d, 0xc2, 0x13, 0x1e, 0xf8, 0x5c, 0x54, 0x03, 0x9f, 0x1e, 0x91,
	0x7d, 0x15, 0xa8, 0x50, 0x9a, 0xd5, 0xbe, 0x31, 0x68, 0x0e, 0x1f, 0xe4, 0x19, 0x6b, 0x23, 0xa1,
	0xd3, 0x5c, 0x60, 0x99, 0xbe, 0x26, 0x2d, 0x5f, 0xa6, 0x5e, 0x12, 0xc4, 0x2a, 0x80, 0x99, 0xb9,
	0xa7, 0xe9, 0x87, 0x79, 0xc6, 0x28, 0xd2, 0xa5, 0x22, 0x17, 0x65, 0x94, 0xbe, 0x22, 0xad, 0x14,
	0xe6, 0x89, 0x27, 0x47, 0x1e, 0xf8, 0xd2, 0xac, 0xdd, 0xec, 0x2c, 0x15, 0xb9, 0x20, 0x18, 0x9d,
	0x82, 0x2f, 0xe9, 0x09, 0x69, 0xc7, 0x09, 0x7c, 0x95, 0x9e, 0x1a, 0x4d, 0x21, 0x92, 0xe6, 0xbe,
	0xee, 0x7c, 0x94, 0x67, 0xac, 0x8b, 0x9d, 0xe5, 0x2a, 0x17, 0xad, 0x22, 0x7c, 0x0f, 0x91, 0xa4,
	0x0e, 0x69, 0x78, 0xae, 0x92, 0x13, 0x48, 0x96, 0x66, 0x5d, 0xf7, 0x75, 0xf3, 0x8c, 0xdd, 0xc7,
	0xbe, 0x6d, 0x85, 0x8b, 0x7f, 0x10, 0x7d, 0x47, 0xea, 0xa8, 0xb0, 0x79, 0xaf, 0xbf, 0x37, 0x68,
	0xbd, 0x78, 0x6a, 0xdf, 0x26, 0xb8, 0x7d, 0xa6, 0x93, 0xc3, 0x83, 0x3c, 0x63, 0x1d, 0x1c, 0x86,
	0x18, 0x17, 0x45, 0x3b, 0x95, 0xa4, 0xe5, 0x2a, 0xe5, 0x7a, 0x17, 0xa3, 0x18, 0x20, 0x34, 0x1b,
	0x7a, 0xf9, 0xdb, 0xcb, 0x8c, 0x55, 0x7e, 0x67, 0xec, 0x68, 0x12, 0xa8, 0xe9, 0x7c, 0x6c, 0x7b,
	0x10, 0x39, 0x1e, 0xa4, 0x11, 0xa4, 0xc5, 0xcf, 0xf3, 0xd4, 0xbf, 0x70, 0xd4, 0x32, 0x96, 0xa9,
	0xfd, 0x61, 0xa6, 0xae, 0xc5, 0x29, 0x8d, 0xe2, 0x82, 0x60, 0x74, 0x0e, 0x10, 0xd2, 0x29, 0x69,
	0xfb, 0xf2, 0x8b, 0x9c, 0xa5, 0x12, 0xf7, 0x34, 0xf5, 0x9e, 0xb3, 0x3b, 0xef, 0xe9, 0x6e, 0xaf,
	0xef, 0x7a, 0x96, 0xbe, 0x3f, 0x1d, 0x6e, 0x36, 0xf1, 0x9f, 0x06, 0xa9, 0xe3, 0x67, 0xd3, 0x8f,
	0x84, 0x2e, 0xe6, 0xe1, 0x4c, 0x26, 0xee, 0x38, 0x08, 0x03, 0xb5, 0x1c, 0x6d, 0x26, 0x69, 0x6f,
	0x35, 0x87, 0x87, 0x79, 0xc6, 0x1e, 0xe3, 0xb0, 0xff, 0x19, 0x2e, 0x0e, 0x76, 0x92, 0x9f, 0x96,
	0xb1, 0xdc, 0x18, 0x03, 0x35, 0x43, 0x63, 0x54, 0x6f, 0x1a, 0xa3, 0x54, 0xe4, 0x82, 0x60, 0xa4,
	0x8d, 0xf1, 0x86, 0x74, 0x76, 0xa6, 0x15, 0x6e, 0x34, 0xf3, 0x8c, 0xf5, 0x6e, 0xf9, 0x07, 0x5c,
	0xec, 0xe2, 0xc3, 0xd3, 0xcb, 0x95, 0x65, 0x5c, 0xad, 0x2c, 0xe3, 0xcf, 0xca, 0x32, 0xbe, 0xaf,
	0xad, 0xca, 0xd5, 0xda, 0xaa, 0xfc, 0x5a, 0x5b, 0x95, 0xcf, 0xcf, 0x4a, 0xba, 0x45, 0xae, 0x52,
	0x0b, 0x99, 0xa4, 0xd2, 0x29, 0xde, 0xe6, 0xb7, 0xe2, 0x75, 0x6a, 0xf9, 0xc6, 0x75, 0xfd, 0xd6,
	0x5e, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x31, 0x96, 0x90, 0xeb, 0xba, 0x03, 0x00, 0x00,
}

func (m *Protocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Protocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DefensePool.Size()
		i -= size
		if _, err := m.DefensePool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAudit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.AttackPool.Size()
		i -= size
		if _, err := m.AttackPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAudit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Errata) > 0 {
		for iNdEx := len(m.Errata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Errata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAudit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProjectHome) > 0 {
		i -= len(m.ProjectHome)
		copy(dAtA[i:], m.ProjectHome)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.ProjectHome)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SourceCode) > 0 {
		i -= len(m.SourceCode)
		copy(dAtA[i:], m.SourceCode)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.SourceCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAudit(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Errata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Errata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Errata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vulnerability) > 0 {
		i -= len(m.Vulnerability)
		copy(dAtA[i:], m.Vulnerability)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Vulnerability)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ErrataCode) > 0 {
		i -= len(m.ErrataCode)
		copy(dAtA[i:], m.ErrataCode)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.ErrataCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VulnerabilityType) > 0 {
		i -= len(m.VulnerabilityType)
		copy(dAtA[i:], m.VulnerabilityType)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.VulnerabilityType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAudit(dAtA []byte, offset int, v uint64) int {
	offset -= sovAudit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Protocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAudit(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.SourceCode)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.ProjectHome)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if len(m.Errata) > 0 {
		for _, e := range m.Errata {
			l = e.Size()
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	l = m.AttackPool.Size()
	n += 1 + l + sovAudit(uint64(l))
	l = m.DefensePool.Size()
	n += 1 + l + sovAudit(uint64(l))
	return n
}

func (m *Errata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VulnerabilityType)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.ErrataCode)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Vulnerability)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	return n
}

func sovAudit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAudit(x uint64) (n int) {
	return sovAudit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Protocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Protocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Protocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectHome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectHome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errata = append(m.Errata, &Errata{})
			if err := m.Errata[len(m.Errata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AttackPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefensePool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefensePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Errata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Errata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Errata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VulnerabilityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VulnerabilityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrataCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrataCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vulnerability", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vulnerability = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAudit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAudit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAudit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAudit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAudit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAudit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAudit = fmt.Errorf("proto: unexpected end of group")
)
